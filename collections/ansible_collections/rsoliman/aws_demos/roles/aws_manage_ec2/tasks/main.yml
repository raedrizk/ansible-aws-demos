---
# tasks file for aws_manage_ec2
# Terminate Existing Running EC2 instances if any
- name: Terminate Existing EC2 Instances if any
  block:
    - name: Gather the instance IPs
      amazon.aws.ec2_instance_info:
        region: "{{ aws_manage_ec2_aws_region }}"
        filters:
          instance-state-name: running
          "tag:Name": "{{ aws_manage_ec2_ec2_name_tag }}"
          "tag:Provisioner": "{{ aws_manage_ec2_provisioner_tag }}"
      register: existing_ec2

    - name: Terminate Existing EC2 Instances if found
      amazon.aws.ec2_instance:
        instance_ids: "{{ item.instance_id }}"
        state: absent
        region: "{{ aws_manage_ec2_aws_region }}"
        wait: true
      with_items: "{{ existing_ec2.instances }}"
  when: aws_manage_ec2_ec2_instance_state is defined and aws_manage_ec2_ec2_instance_state == 'absent'

- name: Manage EC2 instance(s)
  amazon.aws.ec2_instance:
    region: "{{ aws_manage_ec2_aws_region }}"
    instance_type: "{{ aws_manage_ec2_ec2_instance_type }}"
    image_id: "{{ aws_manage_ec2_ec2_ami_id }}"
    key_name: "{{ aws_manage_ec2_ec2_keypair_name }}"
    security_group: "{{ aws_manage_ec2_ec2_security_group }}"
    vpc_subnet_id: "{{ aws_manage_ec2_ec2_subnet_id }}"
    state: "{{ aws_manage_ec2_ec2_instance_state }}"
    network:
      assign_public_ip: true
      subnet_id: "{{ aws_manage_ec2_ec2_subnet_id }}"
      groups:
        - "{{ aws_manage_ec2_ec2_security_group }}"
      delete_on_termination: true
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: "{{ aws_manage_ec2_ec2_volume_size }}"
          delete_on_termination: true
    user_data: "{{ lookup('template', aws_manage_ec2_ec2_userdata_template_file_name) }}"
    count: "{{ aws_manage_ec2_ec2_instance_count }}"
    tags:
      Name: "{{ aws_manage_ec2_ec2_name_tag }}"
      Provisioner: "{{ aws_manage_ec2_provisioner_tag }}"
      Created: "{{ aws_manage_ec2_created_tag }}"
    # exact_count: "{{ ec2_instance_count }}"
    # filters:
    #   tag:Name: "{{ ec2_name_tag }}"
    #   tag:Provisioner: "{{ provisioner_tag }}"
    #   tag:Created: "{{ created_tag }}"
    wait: true
  when: aws_manage_ec2_ec2_instance_state is defined and aws_manage_ec2_ec2_instance_state != 'absent'
  register: ec2

- name: Wait for connection to come up
  ansible.builtin.wait_for:
    host: "{{ item.public_ip_address }}"
    port: "{{ aws_manage_ec2_wait_for_port }}"
    state: started
    timeout: 3600
  with_items: "{{ ec2.instances }}"
  when: ec2.instances is defined

- name: Wait for connection to come up
  ansible.builtin.wait_for:
    host: "{{ item.public_ip_address }}"
    port: "{{ aws_manage_ec2_wait_for_port }}"
    state: started
    timeout: 3600
  with_items: "{{ ec2.tagged_instances }}"
  when: ec2.tagged_instances is defined

- name: Setting stats for future tasks
  ansible.builtin.set_stats:
    data:
      stat_created_ec2: "{{ ec2 }}"
  when: ec2 is defined

- name: Setting facts for future tasks
  ansible.builtin.set_fact:
    stat_created_ec2: "{{ ec2 }}"
  when: ec2 is defined
